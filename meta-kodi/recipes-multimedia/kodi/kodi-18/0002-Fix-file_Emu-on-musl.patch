From 130bf0233f8f8f6efe0cb37ff22cd37d4231ab52 Mon Sep 17 00:00:00 2001
From: Andrea Adami <andrea.adami@gmail.com>
Date: Sun, 2 Dec 2018 02:31:59 +0100
Subject: [PATCH 02/12] Fix file_Emu on musl

Signed-off-by: Khem Raj <raj.khem@gmail.com>
Signed-off-by: Andrea Adami <andrea.adami@gmail.com>
---
 xbmc/cores/DllLoader/exports/emu_msvcrt.cpp   |  24 +--
 xbmc/cores/DllLoader/exports/emu_msvcrt.h     |   2 +-
 .../DllLoader/exports/util/EmuFileWrapper.cpp | 159 ++++++++----------
 .../DllLoader/exports/util/EmuFileWrapper.h   |  28 ++-
 xbmc/cores/DllLoader/exports/wrapper.c        |   2 +-
 5 files changed, 95 insertions(+), 120 deletions(-)

diff --git a/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp b/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
index 5546f6ecdca..7d2a6cc9427 100644
--- a/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
+++ b/xbmc/cores/DllLoader/exports/emu_msvcrt.cpp
@@ -38,6 +38,7 @@
 #include <fcntl.h>
 #include <time.h>
 #include <signal.h>
+#include <paths.h>
 #ifdef TARGET_POSIX
 #include "PlatformDefs.h" // for __stat64
 #include "XFileUtils.h"
@@ -466,13 +467,10 @@ extern "C"
     EmuFileObject* o = g_emuFileWrapper.GetFileObjectByDescriptor(fd);
     if (o)
     {
-      if(!o->used)
-        return NULL;
-
       int nmode = convert_fmode(mode);
       if( (o->mode & nmode) != nmode)
         CLog::Log(LOGWARNING, "dll_fdopen - mode 0x%x differs from fd mode 0x%x", nmode, o->mode);
-      return reinterpret_cast<FILE*>(o);
+      return g_emuFileWrapper.GetStreamByFileObject(o);
     }
     else if (!IS_STD_DESCRIPTOR(fd))
     {
@@ -535,8 +533,8 @@ extern "C"
         return -1;
       }
       object->mode = iMode;
-      FILE* f = reinterpret_cast<FILE*>(object);
-      return g_emuFileWrapper.GetDescriptorByStream(f);
+      //FILE* f = reinterpret_cast<FILE*>(object);
+      return g_emuFileWrapper.GetDescriptorByFileObject(object);
     }
     delete pFile;
     return -1;
@@ -1480,7 +1478,7 @@ extern "C"
     int ret;
 
     ret = dll_fgetpos64(stream, &tmpPos);
-#if !defined(TARGET_POSIX) || defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID)
+#if !defined(__GLIBC__) || defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID)
     *pos = (fpos_t)tmpPos;
 #else
     pos->__pos = (off_t)tmpPos.__pos;
@@ -1493,8 +1491,9 @@ extern "C"
     CFile* pFile = g_emuFileWrapper.GetFileXbmcByStream(stream);
     if (pFile != NULL)
     {
-#if !defined(TARGET_POSIX) || defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID)
-      *pos = pFile->GetPosition();
+#if !defined(__GLIBC__) || defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID)
+      uint64_t *ppos = (uint64_t *) pos;
+      *ppos = pFile->GetPosition();
 #else
       pos->__pos = pFile->GetPosition();
 #endif
@@ -1509,8 +1508,9 @@ extern "C"
     int fd = g_emuFileWrapper.GetDescriptorByStream(stream);
     if (fd >= 0)
     {
-#if !defined(TARGET_POSIX) || defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID)
-      if (dll_lseeki64(fd, *pos, SEEK_SET) >= 0)
+#if !defined(__GLIBC__) || defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID)
+      const uint64_t *ppos = (const uint64_t *) pos;
+      if (dll_lseeki64(fd, *ppos, SEEK_SET) >= 0)
 #else
       if (dll_lseeki64(fd, (__off64_t)pos->__pos, SEEK_SET) >= 0)
 #endif
@@ -1532,7 +1532,7 @@ extern "C"
     if (fd >= 0)
     {
       fpos64_t tmpPos;
-#if !defined(TARGET_POSIX) || defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID)
+#if !defined(__GLIBC__) || defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID)
       tmpPos= *pos;
 #else
       tmpPos.__pos = (off64_t)(pos->__pos);
diff --git a/xbmc/cores/DllLoader/exports/emu_msvcrt.h b/xbmc/cores/DllLoader/exports/emu_msvcrt.h
index eb30c44f093..d8ca2cb9c0e 100644
--- a/xbmc/cores/DllLoader/exports/emu_msvcrt.h
+++ b/xbmc/cores/DllLoader/exports/emu_msvcrt.h
@@ -12,7 +12,7 @@
 #define _onexit_t void*
 #endif
 
-#if defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID)
+#if defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID) || !defined(__GLIBC__)
 typedef off_t __off_t;
 typedef int64_t off64_t;
 typedef off64_t __off64_t;
diff --git a/xbmc/cores/DllLoader/exports/util/EmuFileWrapper.cpp b/xbmc/cores/DllLoader/exports/util/EmuFileWrapper.cpp
index cc8c7bdc464..fe8278d6fca 100644
--- a/xbmc/cores/DllLoader/exports/util/EmuFileWrapper.cpp
+++ b/xbmc/cores/DllLoader/exports/util/EmuFileWrapper.cpp
@@ -23,13 +23,7 @@ constexpr bool isValidFilePtr(FILE* f)
 }
 CEmuFileWrapper::CEmuFileWrapper()
 {
-  // since we always use dlls we might just initialize it directly
-  for (EmuFileObject& file : m_files)
-  {
-    memset(&file, 0, sizeof(EmuFileObject));
-    file.used = false;
-    file.fd = -1;
-  }
+  memset(m_files, 0, sizeof(m_files));
 }
 
 CEmuFileWrapper::~CEmuFileWrapper()
@@ -40,21 +34,9 @@ CEmuFileWrapper::~CEmuFileWrapper()
 void CEmuFileWrapper::CleanUp()
 {
   CSingleLock lock(m_criticalSection);
-  for (EmuFileObject& file : m_files)
+  for (int i = 0; i < MAX_EMULATED_FILES; i++)
   {
-    if (file.used)
-    {
-      file.file_xbmc->Close();
-      delete file.file_xbmc;
-
-      if (file.file_lock)
-      {
-        delete file.file_lock;
-        file.file_lock = nullptr;
-      }
-      file.used = false;
-      file.fd = -1;
-    }
+    UnRegisterFileObject(&m_files[i], true);
   }
 }
 
@@ -66,13 +48,11 @@ EmuFileObject* CEmuFileWrapper::RegisterFileObject(XFILE::CFile* pFile)
 
   for (int i = 0; i < MAX_EMULATED_FILES; i++)
   {
-    if (!m_files[i].used)
+    if (!m_files[i].file_xbmc)
     {
       // found a free location
       object = &m_files[i];
-      object->used = true;
       object->file_xbmc = pFile;
-      object->fd = (i + FILE_WRAPPER_OFFSET);
       object->file_lock = new CCriticalSection();
       break;
     }
@@ -81,79 +61,72 @@ EmuFileObject* CEmuFileWrapper::RegisterFileObject(XFILE::CFile* pFile)
   return object;
 }
 
-void CEmuFileWrapper::UnRegisterFileObjectByDescriptor(int fd)
+void CEmuFileWrapper::UnRegisterFileObject(EmuFileObject *object, bool free_file)
 {
-  int i = fd - FILE_WRAPPER_OFFSET;
-  if (! (i >= 0 && i < MAX_EMULATED_FILES))
-    return;
-
-  if (!m_files[i].used)
-    return;
-
-  CSingleLock lock(m_criticalSection);
-
-  // we assume the emulated function already deleted the CFile object
-  if (m_files[i].file_lock)
+  if (object && object->file_xbmc)
   {
-    delete m_files[i].file_lock;
-    m_files[i].file_lock = nullptr;
+    if (object->file_xbmc && free_file)
+    {
+      object->file_xbmc->Close();
+      delete object->file_xbmc;
+    }
+    if (object->file_lock)
+    {
+      delete object->file_lock;
+    }
+    memset(object, 0, sizeof(*object));
   }
-  m_files[i].used = false;
-  m_files[i].fd = -1;
+}
+
+void CEmuFileWrapper::UnRegisterFileObjectByDescriptor(int fd)
+{
+  CSingleLock lock(m_criticalSection);
+  UnRegisterFileObject(GetFileObjectByDescriptor(fd), false);
 }
 
 void CEmuFileWrapper::UnRegisterFileObjectByStream(FILE* stream)
 {
   if (isValidFilePtr(stream))
   {
-    EmuFileObject* o = reinterpret_cast<EmuFileObject*>(stream);
-    return UnRegisterFileObjectByDescriptor(o->fd);
+    CSingleLock lock(m_criticalSection);
+    UnRegisterFileObject(GetFileObjectByStream(stream), false);
   }
 }
 
 void CEmuFileWrapper::LockFileObjectByDescriptor(int fd)
 {
-  int i = fd - FILE_WRAPPER_OFFSET;
-  if (i >= 0 && i < MAX_EMULATED_FILES)
+  EmuFileObject* object = GetFileObjectByDescriptor(fd);
+  if (object && object->file_xbmc)
   {
-    if (m_files[i].used)
-    {
-      m_files[i].file_lock->lock();
-    }
+    object->file_lock->lock();
   }
 }
 
 bool CEmuFileWrapper::TryLockFileObjectByDescriptor(int fd)
 {
-  int i = fd - FILE_WRAPPER_OFFSET;
-  if (i >= 0 && i < MAX_EMULATED_FILES)
+  EmuFileObject* object = GetFileObjectByDescriptor(fd);
+  if (object && object->file_xbmc)
   {
-    if (m_files[i].used)
-    {
-      return m_files[i].file_lock->try_lock();
-    }
+    return object->file_lock->try_lock();
   }
   return false;
 }
 
 void CEmuFileWrapper::UnlockFileObjectByDescriptor(int fd)
 {
-  int i = fd - FILE_WRAPPER_OFFSET;
-  if (i >= 0 && i < MAX_EMULATED_FILES)
+  EmuFileObject* object = GetFileObjectByDescriptor(fd);
+  if (object && object->file_xbmc)
   {
-    if (m_files[i].used)
-    {
-      m_files[i].file_lock->unlock();
-    }
+    object->file_lock->unlock();
   }
 }
 
 EmuFileObject* CEmuFileWrapper::GetFileObjectByDescriptor(int fd)
 {
-  int i = fd - FILE_WRAPPER_OFFSET;
+  int i = fd - 0x7000000;
   if (i >= 0 && i < MAX_EMULATED_FILES)
   {
-    if (m_files[i].used)
+    if (m_files[i].file_xbmc)
     {
       return &m_files[i];
     }
@@ -161,21 +134,39 @@ EmuFileObject* CEmuFileWrapper::GetFileObjectByDescriptor(int fd)
   return nullptr;
 }
 
+int CEmuFileWrapper::GetDescriptorByFileObject(EmuFileObject *object)
+{
+  int i = object - m_files;
+  if (i >= 0 && i < MAX_EMULATED_FILES)
+  {
+    return 0x7000000 + i;
+  }
+
+  return -1;
+}
+
 EmuFileObject* CEmuFileWrapper::GetFileObjectByStream(FILE* stream)
 {
-  if (isValidFilePtr(stream))
+  EmuFileObject *object = (EmuFileObject*) stream;
+  if (object >= &m_files[0] || object < &m_files[MAX_EMULATED_FILES])
   {
-    EmuFileObject* o = reinterpret_cast<EmuFileObject*>(stream);
-    return GetFileObjectByDescriptor(o->fd);
+    if (object->file_xbmc)
+    {
+      return object;
+    }
   }
+  return NULL;
+}
 
-  return nullptr;
+FILE* CEmuFileWrapper::GetStreamByFileObject(EmuFileObject *object)
+{
+  return (FILE*) object;
 }
 
 XFILE::CFile* CEmuFileWrapper::GetFileXbmcByDescriptor(int fd)
 {
   auto object = GetFileObjectByDescriptor(fd);
-  if (object != nullptr && object->used)
+  if (object != nullptr)
   {
     return object->file_xbmc;
   }
@@ -186,8 +177,8 @@ XFILE::CFile* CEmuFileWrapper::GetFileXbmcByStream(FILE* stream)
 {
   if (isValidFilePtr(stream))
   {
-    EmuFileObject* object = reinterpret_cast<EmuFileObject*>(stream);
-    if (object != nullptr && object->used)
+    EmuFileObject* object = GetFileObjectByStream(stream);
+    if (object != NULL)
     {
       return object->file_xbmc;
     }
@@ -197,34 +188,20 @@ XFILE::CFile* CEmuFileWrapper::GetFileXbmcByStream(FILE* stream)
 
 int CEmuFileWrapper::GetDescriptorByStream(FILE* stream)
 {
-  if (isValidFilePtr(stream))
-  {
-    EmuFileObject* obj = reinterpret_cast<EmuFileObject*>(stream);
-    int i = obj->fd - FILE_WRAPPER_OFFSET;
-    if (i >= 0 && i < MAX_EMULATED_FILES)
-    {
-      return i + FILE_WRAPPER_OFFSET;
-    }
-  }
-  return -1;
+  return GetDescriptorByFileObject(GetFileObjectByStream(stream));
 }
 
 FILE* CEmuFileWrapper::GetStreamByDescriptor(int fd)
 {
-  auto object = GetFileObjectByDescriptor(fd);
-  if (object != nullptr && object->used)
-  {
-    return reinterpret_cast<FILE*>(object);
-  }
-  return nullptr;
+  return GetStreamByFileObject(GetFileObjectByDescriptor(fd));
+}
+
+bool CEmuFileWrapper::DescriptorIsEmulatedFile(int fd)
+{
+  return GetFileObjectByDescriptor(fd) != NULL;
 }
 
 bool CEmuFileWrapper::StreamIsEmulatedFile(FILE* stream)
 {
-  if (isValidFilePtr(stream))
-  {
-    EmuFileObject* obj = reinterpret_cast<EmuFileObject*>(stream);
-    return DescriptorIsEmulatedFile(obj->fd);
-  }
-  return false;
+  return GetFileObjectByStream(stream) != NULL;
 }
diff --git a/xbmc/cores/DllLoader/exports/util/EmuFileWrapper.h b/xbmc/cores/DllLoader/exports/util/EmuFileWrapper.h
index ae273402fb5..a7011e41003 100644
--- a/xbmc/cores/DllLoader/exports/util/EmuFileWrapper.h
+++ b/xbmc/cores/DllLoader/exports/util/EmuFileWrapper.h
@@ -12,14 +12,14 @@
 
 #include "threads/CriticalSection.h"
 
-#if defined(TARGET_POSIX) && !defined(TARGET_DARWIN) && !defined(TARGET_FREEBSD) && !defined(TARGET_ANDROID) && !defined(__UCLIBC__)
-#define _file _fileno
-#elif defined(__UCLIBC__)
-#define _file __filedes
-#endif
+//#if defined(TARGET_POSIX) && !defined(TARGET_DARWIN) && !defined(TARGET_FREEBSD) && !defined(TARGET_ANDROID) && !defined(__UCLIBC__)
+//#define _file _fileno
+//#elif defined(__UCLIBC__)
+//#define _file __filedes
+//#endif
 
 #define MAX_EMULATED_FILES    50
-#define FILE_WRAPPER_OFFSET   0x00000200
+//#define FILE_WRAPPER_OFFSET   0x00000200
 
 namespace XFILE
 {
@@ -31,9 +31,7 @@ typedef struct stEmuFileObject
   XFILE::CFile*  file_xbmc;
   CCriticalSection *file_lock;
   int mode;
-  //Stick this last to avoid 3-7 bytes of padding
-  bool    used;
-  int     fd;
+  int fd;
 } EmuFileObject;
 
 class CEmuFileWrapper
@@ -48,22 +46,22 @@ public:
   void CleanUp();
 
   EmuFileObject* RegisterFileObject(XFILE::CFile* pFile);
+  void UnRegisterFileObject(EmuFileObject*, bool free_file);
   void UnRegisterFileObjectByDescriptor(int fd);
   void UnRegisterFileObjectByStream(FILE* stream);
   void LockFileObjectByDescriptor(int fd);
   bool TryLockFileObjectByDescriptor(int fd);
   void UnlockFileObjectByDescriptor(int fd);
   EmuFileObject* GetFileObjectByDescriptor(int fd);
+  int GetDescriptorByFileObject(EmuFileObject*);
   EmuFileObject* GetFileObjectByStream(FILE* stream);
+  FILE* GetStreamByFileObject(EmuFileObject*);
   XFILE::CFile* GetFileXbmcByDescriptor(int fd);
   XFILE::CFile* GetFileXbmcByStream(FILE* stream);
-  static int GetDescriptorByStream(FILE* stream);
+  int GetDescriptorByStream(FILE* stream);
   FILE* GetStreamByDescriptor(int fd);
-  static constexpr bool DescriptorIsEmulatedFile(int fd)
-  {
-    return fd >= FILE_WRAPPER_OFFSET && fd < FILE_WRAPPER_OFFSET + MAX_EMULATED_FILES;
-  }
-  static bool StreamIsEmulatedFile(FILE* stream);
+  bool DescriptorIsEmulatedFile(int fd);
+  bool StreamIsEmulatedFile(FILE* stream);
 private:
   EmuFileObject m_files[MAX_EMULATED_FILES];
   CCriticalSection m_criticalSection;
diff --git a/xbmc/cores/DllLoader/exports/wrapper.c b/xbmc/cores/DllLoader/exports/wrapper.c
index d618565c17d..05e63685061 100644
--- a/xbmc/cores/DllLoader/exports/wrapper.c
+++ b/xbmc/cores/DllLoader/exports/wrapper.c
@@ -27,7 +27,7 @@
 #endif
 #include <dlfcn.h>
 
-#if defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID)
+#if defined(TARGET_DARWIN) || defined(TARGET_FREEBSD) || defined(TARGET_ANDROID) || !defined(__GLIBC__)
 typedef off_t     __off_t;
 typedef int64_t   off64_t;
 typedef off64_t   __off64_t;
-- 
2.17.1

